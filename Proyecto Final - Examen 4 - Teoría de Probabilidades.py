# -*- coding: utf-8 -*-
"""Proyecto Final - Examen final 4. Teoría de Probabilidades

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PotD4wLhFRkyrq42P9xrUquF9s9hpDk6

Universidad del Valle de Guatemala

Teoria de Proabilidades

Proyecto Final - Parcial 4

# **LEY DE LOS NÚMEROS GRANDES**
"""

#LEY DE LOS NÚMEROS GRANDES
import random

CASILLERO = []
cantidad_iteraciones = 1000000 #Numero grande

for i in range(cantidad_iteraciones):
  clavos_pegados = []
  nivel1 = 0
  nivel2 = random.choice([1,2])
  if nivel2 == 1:
    nivel3 = random.choice([3,4])
    if nivel3 == 3:
      nivel4 = random.choice([6,7])
      if nivel4 == 6:
        nivel5 = random.choice([10,11])
      if nivel4 == 7:
        nivel5 = random.choice([11,12])
    if nivel3 == 4:
      nivel4 = random.choice([7,8])
      if nivel4 == 7:
        nivel5 = random.choice([11,12])
      if nivel4 == 8:
        nivel5 = random.choice([12,13])
  if nivel2 == 2:
    nivel3 = random.choice([4,5])
    if nivel3 == 4:
      nivel4 = random.choice([7,8])
      if nivel4 == 7:
        nivel5 = random.choice([11,12])
      if nivel4 == 8:
        nivel5 = random.choice([12,13])
    if nivel3 == 5:
      nivel4 = random.choice([8,9])
      if nivel4 == 8:
        nivel5 = random.choice([12,13])
      if nivel4 == 9:
        nivel5 = random.choice([13,14])

  clavos_pegados.append(nivel1)
  clavos_pegados.append(nivel2)
  clavos_pegados.append(nivel3)
  clavos_pegados.append(nivel4)
  clavos_pegados.append(nivel5)

  ultimo_elemento = len(clavos_pegados) - 1

  if clavos_pegados[ultimo_elemento] == 10:
    casillero = random.choice(["A", "B"])

  if clavos_pegados[ultimo_elemento] == 11:
    casillero = random.choice(["B", "C"])

  if clavos_pegados[ultimo_elemento] == 12:
    casillero = random.choice(["C", "D"])

  if clavos_pegados[ultimo_elemento] == 13:
    casillero = random.choice(["D", "E"])

  if clavos_pegados[ultimo_elemento] == 14:
    casillero = random.choice(["E", "F"])

  CASILLERO.append(casillero)


CASILLERO_A = 0
CASILLERO_B = 0
CASILLERO_C = 0
CASILLERO_D = 0
CASILLERO_E = 0
CASILLERO_F = 0

for casillero in CASILLERO:
  if casillero == "A":
    CASILLERO_A += 1

  if casillero == "B":
    CASILLERO_B += 1

  if casillero == "C":
    CASILLERO_C += 1

  if casillero == "D":
    CASILLERO_D += 1

  if casillero == "E":
    CASILLERO_E += 1

  if casillero == "F":
    CASILLERO_F += 1


#PROBABILIDAD DE CADA CASILLERO
PA = CASILLERO_A / cantidad_iteraciones
PB = CASILLERO_B / cantidad_iteraciones
PC = CASILLERO_C / cantidad_iteraciones
PD = CASILLERO_D / cantidad_iteraciones
PE = CASILLERO_E / cantidad_iteraciones
PF = CASILLERO_F / cantidad_iteraciones

"""# **CADENAS DE MARKOV**"""

import numpy as np

def Lista(posicion1,posicion2):
  lista = [0]*21
  lista[posicion1] = 1/2
  lista[posicion2] = 1/2
  return lista

#hacer filas de la matriz de transicion
estado0 = Lista(1,2)
estado1 = Lista(3,4)
estado2 = Lista(4,5)
estado3 = Lista(6,7)
estado4 = Lista(7,8)
estado5 = Lista(8,9)
estado6 = Lista(10,11)
estado7 = Lista(11,12)
estado8 = Lista(12,13)
estado9 = Lista(13,14)
estado10 = Lista(15,16)
estado11 = Lista(16,17)
estado12 = Lista(17,18)
estado13 = Lista(18,19)
estado14 = Lista(19,20)
estado15 = [0]*21
estado15[15] = 1
estado16 = [0]*21
estado16[16] = 1
estado17 = [0]*21
estado17[17] = 1
estado18 = [0]*21
estado18[18] = 1
estado19 = [0]*21
estado19[19] = 1
estado20 = [0]*21
estado20[20] = 1 

#declarar la matriz de transicion y crear el eigenvector
matriz_transicion = np.array([estado0,estado1,estado2,estado3,estado4,estado5,estado6,estado7,estado8,estado9,estado10,estado11,estado12,estado13,estado14,estado15,estado16,estado17,estado18,estado19,estado20])
vectorfila = [0]*21
vectorfila[0] = 1

distribucion = np.array([vectorfila])

for i in range(5):
  distribucion = distribucion@matriz_transicion

PA_Markov = distribucion[0][15]
PB_Markov = distribucion[0][16]
PC_Markov = distribucion[0][17]
PD_Markov = distribucion[0][18]
PE_Markov = distribucion[0][19]
PF_Markov = distribucion[0][20]

"""# **RESULTADOS PROBABILIDADES**"""

import matplotlib.pyplot as plt
import pandas as pd


print("RESULTADOS OBTENIDOS")
print("---------------------------------------------------------------------")
print("PROBABILIDADES LEY DE GRANDES NUMEROS")
print("Probabilidad del Casillero A: " + str(PA))
print("Probabilidad del Casillero B: " + str(PB))
print("Probabilidad del Casillero C: " + str(PC))
print("Probabilidad del Casillero D: " + str(PD))
print("Probabilidad del Casillero E: " + str(PE))
print("Probabilidad del Casillero F: " + str(PF))
print("---------------------------------------------------------------------")
print("PROBABILIDADES CADENAS DE MARKOV")
print("Probabilidad del Casillero A: "+str(PA_Markov))
print("Probabilidad del Casillero B: "+str(PB_Markov))
print("Probabilidad del Casillero C: "+str(PC_Markov))
print("Probabilidad del Casillero D: "+str(PD_Markov))
print("Probabilidad del Casillero E: "+str(PE_Markov))
print("Probabilidad del Casillero F: "+str(PF_Markov))
print("\n")


probabilidades_numerosgrandes = [PA, PB, PC, PD, PE, PF]
probabilidades_markov = [PA_Markov, PB_Markov, PC_Markov, PD_Markov, PE_Markov, PF_Markov]
Estados = ["A", "B", "C", "D", "E", "F"]

listadiferencias = []
for i in range(6):
  listadiferencias.append(abs(probabilidades_numerosgrandes[i] - probabilidades_markov[i]))


comparacion = {"Probabilidad Numeros Grandes": probabilidades_numerosgrandes, "Probabilidades Markov": probabilidades_markov, "Diferencia Probabilidades": listadiferencias }
df = pd.DataFrame(comparacion)
print("\n")
print(df)

print("\n")
posiciones = np.arange(len(Estados))
ancho_barras = 0.35

plt.bar(posiciones - ancho_barras/2, probabilidades_numerosgrandes, width=ancho_barras, label='Probabilidades Números Grandes')
plt.bar(posiciones + ancho_barras/2, probabilidades_markov, width=ancho_barras, label='Probabilidades Markov')

plt.xticks(posiciones, Estados)
plt.xlabel('Estados')
plt.ylabel('Probabilidades')
plt.title('Comparación de probabilidades entre Números Grandes y Markov')
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))

plt.show()